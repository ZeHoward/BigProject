Index: target/classes/static/css/productList.css
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\n/* 中間區塊(商品分類側邊欄位和商品卡) */\n.mid {\n  display: flex;\n  flex: 1;\n}\n/* 商品分類菜單(五大項) */\n.list,\n.list-title {\n  flex: 1;\n  border-right: 1px solid #ccc;\n  padding: 20px;\n  font-weight: 600;\n}\n\n.list a,\n.list-title,\n.down-btn {\n  padding: 6px 8px;\n  text-decoration: none;\n  font-size: 20px;\n  color: #000000;\n  display: block;\n  border: none;\n  background: none;\n  width: 100%;\n  text-align: center;\n  cursor: pointer;\n  outline: none;\n  font-weight: 600;\n}\n\n.down-btn {\n  background-color: #cbb68c;\n}\n\n.list-title {\n  background-color: #faf4e8;\n}\n\n.down-container > a:hover {\n  background-color: #ece2b3;\n}\n.down-container > a:active {\n  background-color: #ece2b3;\n}\n\n/* 商品區 */\n.title{  /*商品分類類型標題*/\n  font-size: 30px;\n  /*background-color: #cc4235;*/\n  padding: 12px 8px;\n  font-weight: 600;\n  margin-bottom: 5px;\n  text-align: center;\n}\n\n.sortAndSearch {\n  display: flex;\n  justify-content: space-between;  /* 搜尋框和排序按鈕靠兩邊對齊 */\n  align-items: center;  /* 垂直置中 */\n  /*background-color: #3c4f6d;*/\n  padding: 6px 0;\n  font-size: 20px;\n  margin-bottom: 20px;\n  height: 40px;\n}\n\n.searchContainer {\n  display: flex;  /* 确保搜索输入框和图标在同一行 */\n  align-items: center;  /* 垂直居中 */\n}\n\n#searchDiv {\n  overflow: hidden;\n  display: flex;  /* 確保搜尋框和搜尋按鈕垂直置中 */\n  align-items: center; /* 確保搜尋框和搜尋按鈕垂直置中 */\n}\n\n#searchInput {\n  height: 40px;\n  border: 1px solid black;\n  font-size: 16px;\n  text-align: center;\n}\n\n.sort {\n  display: flex; /* 確保排序按鈕垂直置中 */\n  align-items: center; /* 確保排序按鈕垂直置中 */\n  /*background-color: #cc4235;*/\n  height: 40px;\n  border: black 1px solid;\n}\n\n.searchIcon{\n  cursor: pointer;\n  margin-left: 10px;\n}\n\n.product-zone { /*商品標題+搜尋欄排序按鈕+商品卡*/\n  display: flex;\n  flex-direction: column;\n  flex: 5;\n  padding: 20px 40px;\n}\n\n#productContainer { /*所有商品卡*/\n  /*background-color: #45a049;*/\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-between;\n  flex: 1;\n  width: 100%;\n}\n\n.product {\n  flex: 0 1 30%;\n  /*width: 320px;*/\n  text-align: center;\n  border: #f4f4f4 2px solid;\n  border-radius: 5px;\n  padding: 10px;\n  margin-bottom: 20px;\n}\n\n.product:hover {\n  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);\n}\n\n.product-image {\n  display: block;\n  margin: 10px auto;\n  width: 90%;\n  height: 35vh;\n  object-fit: cover;\n  border-radius: 5px;\n}\n\n.product-name,\n.product-price,\n.home-product-btn { /*home-product-btn是收藏按鈕和加入購物車按鈕*/\n  margin: 10px 0;\n  font-size: large;\n}\n\n.product-price {\n  font-size: 20px;\n  color: #d35b50;\n  font-weight: 700;\n}\n\n.fa-heart {\n  font-size: 25px;\n  align-items: center;\n}\n\n.add-to-cart {\n  background-color: #e0912f;\n  color: white;\n  border: none;\n  padding: 10px 0;\n  border-radius: 5px;\n  margin-top: 5px;\n  cursor: pointer;\n  font-size: 16px;\n  width: 60%;\n}\n\n.home-product-btn { /*按鈕的家*/\n  display: flex;\n  justify-content: space-around;\n  align-items: center;\n}\n\n.add-to-favorite {\n  margin-top: 5px;\n  padding-left: 15px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  border: none;\n  background-color: transparent;\n  color: #787575;\n  cursor: pointer;\n}\n\n.add-to-favorite.favorited {\n  color: #cc4235; /* 收藏後的顏色 */\n}\n\n.add-to-cart:hover,\n.add-to-cart:active {\n  background-color: #de8415;\n}\n\n.pagination{\n  text-align: center;\n}\n\n#prevPage,\n#nextPage{\n  border: none;\n  background-color:#ece2b3 ;\n  font-size: 20px;\n  padding: 10px;\n  border-radius: 5px;\n  margin: 0 10px;\n}\n\ni.active {\n  color: red;\n}\n\n\n\n@media (min-width: 1600px) and (max-width: 3840px) {\n  .product{\n    flex: 0 1 30%;\n  }\n\n  .product-image{\n    height: 40vh;\n  }\n\n  #productName{\n    font-size: 25px;\n  }\n\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/target/classes/static/css/productList.css b/target/classes/static/css/productList.css
--- a/target/classes/static/css/productList.css	(revision 9096718e92387ba0e53803eca67c3d058acf8d38)
+++ b/target/classes/static/css/productList.css	(date 1728297566849)
@@ -214,9 +214,6 @@
 
 
 @media (min-width: 1600px) and (max-width: 3840px) {
-  .product{
-    flex: 0 1 30%;
-  }
 
   .product-image{
     height: 40vh;
Index: target/classes/static/js/productList.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>let currentPage = 1; //目前的頁碼\nconst productsPerPage = 9; // 每頁顯示的商品數量，超過九個換頁\nlet totalPages = 1; //總頁數\nconsole.log('productList.js檔案')\n\n//document.addEventListener('DOMContentLoaded', function () {\nwindow.onload = function () {\n\tconsole.log('window.onload裡面')\n    fetchRandomProducts(); //隨機抓取商品\n\n    document.querySelectorAll(\".links\").forEach((link) => {\n        link.addEventListener(\"click\", function (event) {\n            event.preventDefault();\n            const type = this.getAttribute(\"data-type\"); //自訂義屬姓\n            const categoryId = this.getAttribute(\"data-category\");\n            fetchProductsByTypeAndCategory(type, categoryId);\n        });\n    });\n\n    // 處理按鈕事件\n    document.getElementById(\"productContainer\").addEventListener(\"click\", handleProductActions);\n    // 分頁按鈕(上一頁)\n    document.getElementById(\"prevPage\").addEventListener(\"click\", () => {\n        if (currentPage > 1) {\n            currentPage--;\n            renderCurrentPage();\n        }\n    });\n    // 分頁按鈕(下一頁)\n    document.getElementById(\"nextPage\").addEventListener(\"click\", () => {\n        if (currentPage < totalPages) {\n            currentPage++;\n            renderCurrentPage();\n        }\n    });\n    // 關鍵字搜尋商品\n    document.getElementById(\"searchIcon\").addEventListener(\"click\", () => {\n        const keyword = document.getElementById(\"searchInput\").value.trim();\n        if (keyword) {\n            searchProducts(keyword);\n        } else {\n            alert(\"請輸入關鍵字\");\n        }\n    })\n    // 根據商品類別抓取商品\n    document.querySelectorAll(\".productType\").forEach((typeBtn) => {\n        typeBtn.addEventListener(\"click\", function (event) {\n            event.preventDefault();\n            const productType = this.getAttribute(\"data-type\")\n            fetchProductsByType(productType);\n        })\n    })\n\n}\n\n//隨機顯示商品\nfunction fetchRandomProducts() {\n\tconsole.log('fetchrandom方法')\n    fetch(\"/products\")\n        .then((response) => {\n            if (!response.ok) {\n                throw new Error(\"無法獲得商品清單\");\n            }\n            return response.json();\n        })\n        .then((data) => {\n            products = data; // 更新 products 數據\n            totalPages = Math.ceil(products.length / productsPerPage);\n            currentPage = 1; // 重置頁碼\n            renderCurrentPage(); // 顯示當前頁面產品\n            document.getElementById(\"sort\").addEventListener(\"change\", () => {\n                const sortBy = document.getElementById(\"sort\").value;\n                sortProducts(products, sortBy);\n            });\n        })\n        .catch((error) => {\n            console.error(\"Error fetching products:\", error);\n        });\n\n    document\n        .getElementById(\"productContainer\")\n        .addEventListener(\"click\", handleProductActions);\n}\n\n// 渲染當前頁面\nfunction renderCurrentPage() {\n    const startIndex = (currentPage - 1) * productsPerPage;\n    const endIndex = startIndex + productsPerPage;\n    const productsToShow = products.slice(startIndex, endIndex);\n\n    displayProducts(productsToShow); // 顯示當前頁面商品\n    updatePageInfo(); // 更新頁面信息\n}\n\n// 更新頁碼\nfunction updatePageInfo() {\n    document.getElementById(\"pageInfo\").textContent = `第 ${currentPage} 頁 / 共 ${totalPages} 頁`;\n}\n\n// 處理加入購物車和收藏商品按鈕邏輯\nfunction handleProductActions(event) {\n    const target = event.target;\n\n    // 收藏按鈕\n    if (target.closest(\".add-to-favorite\")) {\n        event.preventDefault(); // 阻止預設行為\n        event.stopPropagation(); // 阻止事件冒泡\n        checkLoginStatus()\n            .then((isLoggedIn) => {\n                if (isLoggedIn) {\n                    getUserId().then(userId => {\n                        if (userId) {\n                            const productElement = target.closest(\".product\");\n                            const productId = productElement.dataset.productId;\n                            const productName = productElement.dataset.productName;\n                            const favoriteBtn = target.closest(\".fa-heart\");\n\n                            if (favoriteBtn.classList.contains(\"active\")) {\n                                fetch(`/api/favorites/remove?userId=${userId}&productId=${productId}`, {\n                                    method: \"DELETE\",\n                                }).then(() => {\n                                    favoriteBtn.classList.remove(\"active\");\n                                    Swal.fire({\n                                        title: \"已取消收藏\",\n                                        text: `已將${productName}移除收藏`,\n                                        icon: \"success\",\n                                        timer: 1500,\n                                    });\n                                }).catch((error)=>{\n                                    console.error(\"移除商品收藏遇到錯誤\",error);\n                                })\n                            } else {\n                                fetch(`/api/favorites/add?userId=${userId}&productId=${productId}`, {\n                                    method: \"POST\",\n                                })\n                                    .then(response => response.json())\n                                    .then(() => {\n                                        favoriteBtn.classList.add(\"active\");\n                                        Swal.fire({\n                                            title: \"成功\",\n                                            text: `已將${productName}加入收藏`,\n                                            icon: \"success\",\n                                            timer: 1500,\n                                        });\n                                        console.log(productId);\n                                        console.log(productName);\n                                    })\n                                    .catch((error) => {\n                                        console.error(\"加入收藏時發生錯誤:\", error);\n                                    });\n                            }\n                        }\n                    });\n                } else {\n                    Swal.fire({\n                        title: \"未登入\",\n                        text: `請先登入才能加入收藏`,\n                        icon: \"warning\",\n                        showCancelButton: true,\n                        confirmButtonText: '登入',\n                        cancelButtonText: '取消',\n                    }).then((result) => {\n                        if (result.isConfirmed) {\n                            window.location.href = \"/loginPage\";\n                        }\n                    });\n                }\n            })\n        return; // 阻止後續的跳轉行為\n    }\n\n    // 加入購物車按鈕\n    if (target.closest(\".add-to-cart\")) {\n        event.preventDefault(); // 阻止預設行為\n        event.stopPropagation(); // 阻止事件冒泡\n        checkLoginStatus()\n            .then((isLoggedIn) => {\n                if (isLoggedIn) {\n                    getUserId().then(userId => {\n                        if (userId) {\n                            const productElement = target.closest(\".product\");\n                            const productId = productElement.dataset.productId;\n                            const productName = productElement.dataset.productName;\n                            const quantity = 1;\n                            // const productId = parseInt(new URLSearchParams(window.location.search).get(\"productId\"));\n                            const cartItem =\n                                {\n                                    productName: productName,\n                                    productId: productId,\n                                    quantity: quantity\n                                };\n                            console.log(cartItem);\n\n                            // 發送加入購物車請求\n                            fetch(`/api/cart/${userId}`, {\n                                method: \"POST\",\n                                headers: {\n                                    \"Content-Type\": \"application/json\",\n                                },\n                                body: JSON.stringify(cartItem), // 傳送商品數據\n                            })\n                                .then(response => {\n                                    if (response.ok) {\n                                        Swal.fire({\n                                            title: \"成功\",\n                                            text: \"已將商品加入購物車\",\n                                            icon: \"success\",\n                                            timer: 1500,\n                                        });\n                                    } else {\n                                        Swal.fire({\n                                            title: \"錯誤\",\n                                            text: \"無法將商品加入購物車\",\n                                            icon: \"error\",\n                                        });\n                                    }\n                                })\n                                .catch((error) => {\n                                    console.error(\"加入購物車時發生錯誤:\", error);\n                                    Swal.fire({\n                                        title: \"錯誤\",\n                                        text: \"加入購物車時發生錯誤\",\n                                        icon: \"error\",\n                                    });\n                                });\n                        }\n                    });\n                } else {\n                    Swal.fire({\n                        title: \"未登入\",\n                        text: \"請先登入才能加入購物車\",\n                        icon: \"warning\",\n                        showCancelButton: true,\n                        confirmButtonText: '登入',\n                        cancelButtonText: '取消',\n                    }).then((result) => {\n                        if (result.isConfirmed) {\n                            window.location.href = \"/loginPage\";\n                        }\n                    });\n                }\n            });\n        return; // 阻止後續的跳轉行為\n    }\n\n    const productElement = target.closest(\".product\");\n    if (productElement) {\n        const productId = productElement.dataset.productId; // 從自定義屬性中獲取 productId\n        if (productId) {\n            window.location.href = `/detail?productId=${productId}`; // 跳轉到商品詳情頁\n        }\n    }\n}\n\n// 渲染商品卡\nfunction displayProducts(productsToShow) {\n    const container = document.getElementById(\"productContainer\");\n    container.innerHTML = \"\"; // 清空現有的產品重新渲染\n    productsToShow.forEach((product) => {\n        //生成商品卡\n        const productDiv = document.createElement(\"div\");\n        productDiv.className = \"product\";\n        productDiv.style.cursor = \"pointer\";\n        productDiv.dataset.productId = product.productId;\n        productDiv.dataset.productName = product.name; // 設置自定義屬性 data-name 購物車撈商品名稱用\n\n        const imgElement = document.createElement(\"img\");\n        imgElement.className = \"product-image\";\n        imgElement.alt = product.name;\n\n        const productHtml = `\n            <p class=\"product-name\" id=\"productName\">${product.name}</p>\n            <p class=\"product-price\">$NT${product.price}</p>\n            <div class=\"home-product-btn\">\n                <button class=\"add-to-favorite\"><i class=\"fa-solid fa-heart\"></i></button>\n                <button class=\"add-to-cart\"><i class=\"fa-solid fa-cart-shopping\"></i>&nbsp;&nbsp;&nbsp;加入購物車</button>\n            </div>\n        `;\n        productDiv.innerHTML = productHtml;\n        productDiv.insertBefore(imgElement, productDiv.firstChild); // 將圖片放到最前面\n        container.appendChild(productDiv);\n\n        fetch(`/productImages/product/${product.productId}`)\n            .then((response) => {\n                if (!response.ok) {\n                    throw new Error(\"無法獲取商品圖片\");\n                }\n                return response.json();\n            })\n            .then((images) => {\n                if (images.length > 0) {\n                    imgElement.src = images[0];\n                } else {\n                    imgElement.src = \"../material/icon/default.png\"; // 如果沒有圖片時使用預設圖片\n                }\n            })\n            .catch((error) => {\n                console.error(`Error fetching product image for product ${product.id}:`, error);\n                imgElement.src = \"../material/icon/error.png\"; // 如果發生錯誤使用錯誤圖片\n            });\n    });\n\n    //沒有排滿三張商品卡填補空白商品卡(方便對齊)\n    const itemsPerRow = 3;\n    let itemsToAdd = itemsPerRow - (productsToShow.length % itemsPerRow);\n    if (itemsToAdd && itemsToAdd !== itemsPerRow) {\n        for (let i = 0; i < itemsToAdd; i++) {\n            const emptyDiv = document.createElement(\"div\");\n            emptyDiv.className = \"product empty\";\n            emptyDiv.style.visibility = \"hidden\";\n            container.appendChild(emptyDiv);\n        }\n    }\n}\n\n//依照產品類型和產品分類抓取商品\nfunction fetchProductsByTypeAndCategory(type, categoryId) {\n    fetch(`products/filter?type=${type}&categoryId=${categoryId}`)\n        .then((response) => {\n            if (!response.ok) {\n                throw new Error(\"無法獲得商品清單\");\n            }\n            return response.json();\n        })\n        .then((data) => {\n            products = data; // 更新 products 數據\n            totalPages = Math.ceil(products.length / productsPerPage);\n            currentPage = 1; // 重置頁碼\n            renderCurrentPage(); // 顯示當前頁面產品\n            document.getElementById(\"sort\").addEventListener(\"change\", () => {\n                const sortBy = document.getElementById(\"sort\").value;\n                sortProducts(products, sortBy);\n            });\n            if (type === \"mealkit\") {\n                switch (categoryId) {\n                    case(\"1\"):\n                        document.getElementById(\"title\").innerHTML = `生鮮食材包 異國料理`;\n                        console.log(1);\n                        break;\n                    case(\"2\"):\n                        document.getElementById(\"title\").innerHTML = `生鮮食材包 多人料理`;\n                        console.log(1);\n                        break;\n                    case(\"3\"):\n                        document.getElementById(\"title\").innerHTML = `生鮮食材包 兒童料理`;\n                        console.log(1);\n                        break;\n                    case(\"4\"):\n                        document.getElementById(\"title\").innerHTML = `生鮮食材包 銀髮友善`;\n                        console.log(1);\n                        break;\n                    case(\"5\"):\n                        document.getElementById(\"title\").innerHTML = `生鮮食材包 家常料理`;\n                        console.log(1);\n                        break;\n\n                }\n            } else {\n                switch (categoryId) {\n                    case(\"1\"):\n                        document.getElementById(\"title\").innerHTML = `調理包 異國料理`;\n                        console.log(1);\n                        break;\n                    case(\"2\"):\n                        document.getElementById(\"title\").innerHTML = `調理包 多人料理`;\n                        console.log(1);\n                        break;\n                    case(\"3\"):\n                        document.getElementById(\"title\").innerHTML = `調理包 兒童料理`;\n                        console.log(1);\n                        break;\n                    case(\"4\"):\n                        document.getElementById(\"title\").innerHTML = `調理包 銀髮友善`;\n                        console.log(1);\n                        break;\n                    case(\"5\"):\n                        document.getElementById(\"title\").innerHTML = `調理包 家常料理`;\n                        console.log(1);\n                        break;\n\n                }\n            }\n\n        })\n        .catch((error) => {\n            console.error(\"Error fetching products:\", error);\n        });\n}\n\n//依照產品類型抓取商品\nfunction fetchProductsByType(type) {\n    fetch(`products/type/${type}`)\n        .then((response) => {\n            if (!response.ok) {\n                throw new Error(\"無法獲取商品清單\");\n            }\n            return response.json();\n        })\n        .then(data => {\n            products = data; // 更新 products 數據\n            totalPages = Math.ceil(products.length / productsPerPage);\n            currentPage = 1; // 重置頁碼\n            renderCurrentPage(); // 顯示當前頁面產品\n            document.getElementById(\"sort\").addEventListener(\"change\", () => {\n                const sortBy = document.getElementById(\"sort\").value;\n                sortProducts(products, sortBy);\n            });\n            if(type===\"mealkit\"){\n                document.getElementById(\"title\").innerHTML=\"生鮮食材包\";\n            }else{\n                document.getElementById(\"title\").innerHTML=\"調理包\";\n            }\n        })\n        .catch(error => {\n            console.error(\"Error fetching products:\", error);\n        })\n}\n\n//商品排序按鈕\nfunction sortProducts(products, sortBy) {\n    if (sortBy === \"priceLowHigh\") {\n        products.sort((a, b) => a.price - b.price);\n    } else if (sortBy === \"priceHighLow\") {\n        products.sort((a, b) => b.price - a.price);\n    } else if (sortBy === \"dateNewOld\") {\n        products.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));\n    } else if (sortBy === \"dateOldNew\") {\n        products.sort((a, b) => new Date(a.createdAt) - new Date(b.createdAt));\n    }\n    console.log(products);\n    displayProducts(products); // 重新顯示排序後的產品\n}\n\n//取得userId\nfunction getUserId() {\n    return fetch('/users/userAllInfo')\n        .then(response => {\n            if (!response.ok) {\n                throw new Error(\"無法獲取用戶 ID\");\n            }\n            return response.json(); // 返回 UserAllInfo 包含 userId\n        })\n        .then(data => data.userId) // 假設返回的數據中包含 userId\n        .catch(error => {\n            console.error(\"獲取用戶 ID 時發生錯誤\", error);\n            return null;\n        });\n}\n\n//點選加入購物車和收藏按鈕先確認登入狀態再加入收藏和購物車\nfunction checkLoginStatus() {\n    return fetch('users/checkSession').then(response => {\n        if (!response.ok) {\n            throw new Error(\"無法檢查登入狀態\");\n        }\n        return response.json();\n        console.log(data);\n    })\n        .catch(error => {\n            console.error(\"登入時發生錯誤\", error);\n            return false;\n        })\n}\n\n//關鍵字搜尋功能(模糊查詢)\nfunction searchProducts(keyword) {\n    fetch(`/products/search?keyword=${encodeURIComponent(keyword)}`, {method: \"GET\"})\n        .then((response) => {\n            if (!response.ok) {\n                throw new Error(\"無法用關鍵字搜尋商品\");\n            }\n            return response.json();\n        })\n        .then((data) => {\n            products = data; // 更新 products 數據\n            totalPages = Math.ceil(products.length / productsPerPage);\n            currentPage = 1; // 重置頁碼\n            renderCurrentPage(); // 顯示當前頁面產品\n            document.getElementById(\"sort\").addEventListener(\"change\", () => {\n                const sortBy = document.getElementById(\"sort\").value;\n                sortProducts(products, sortBy);\n            });\n        })\n        .catch((error) => {\n            console.error(\"搜尋過程發生錯誤\", error);\n        });\n}\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/target/classes/static/js/productList.js b/target/classes/static/js/productList.js
--- a/target/classes/static/js/productList.js	(revision 9096718e92387ba0e53803eca67c3d058acf8d38)
+++ b/target/classes/static/js/productList.js	(date 1728297566856)
@@ -3,8 +3,8 @@
 let totalPages = 1; //總頁數
 console.log('productList.js檔案')
 
-//document.addEventListener('DOMContentLoaded', function () {
-window.onload = function () {
+document.addEventListener('DOMContentLoaded', function () {
+//window.onload = function () {
 	console.log('window.onload裡面')
     fetchRandomProducts(); //隨機抓取商品
 
@@ -51,7 +51,7 @@
         })
     })
 
-}
+});
 
 //隨機顯示商品
 function fetchRandomProducts() {
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"ExternalStorageConfigurationManager\" enabled=\"true\" />\r\n  <component name=\"MavenProjectsManager\">\r\n    <option name=\"originalFiles\">\r\n      <list>\r\n        <option value=\"$PROJECT_DIR$/pom.xml\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"ProjectRootManager\" version=\"2\" languageLevel=\"JDK_22\" default=\"true\" project-jdk-name=\"22\" project-jdk-type=\"JavaSDK\" />\r\n  <component name=\"ProjectRootManager\" version=\"2\" languageLevel=\"JDK_17\" default=\"true\" project-jdk-name=\"17\" project-jdk-type=\"JavaSDK\" />\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
--- a/.idea/misc.xml	(revision 9096718e92387ba0e53803eca67c3d058acf8d38)
+++ b/.idea/misc.xml	(date 1728297564875)
@@ -8,6 +8,5 @@
       </list>
     </option>
   </component>
-  <component name="ProjectRootManager" version="2" languageLevel="JDK_22" default="true" project-jdk-name="22" project-jdk-type="JavaSDK" />
   <component name="ProjectRootManager" version="2" languageLevel="JDK_17" default="true" project-jdk-name="17" project-jdk-type="JavaSDK" />
 </project>
\ No newline at end of file
Index: target/classes/static/js/template.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>//window.onload = () => {\n\ndocument.addEventListener(\"DOMContentLoaded\", function () {\t\n  // 菜單展開、關閉功能\n  window.openSidenav = function () {\n    document.getElementById(\"sidenav\").style.width = \"100%\";\n    document.body.style.overflow = \"hidden\";\n  };\n\n  window.closeSidenav = function () {\n    document.getElementById(\"sidenav\").style.width = \"0%\";\n    document.body.style.overflow = \"\";\n  };\n\n  //展開菜單選項\n  // menu toggle up/down 圖案\n  // window.togglePic1 = function () {\n  //   var margin1 = document.getElementById(\"add\");\n  //   var img1 = document.getElementById(\"updown1\");\n  //   var childContent1 = document.getElementById(\"tem-dropdown-content1\");\n  //\n  //   if (img1.src.includes(\"down.png\")) {\n  //     img1.src = \"./material/icon/up.png\";\n  //     margin1.style.margin = \"40px 0\";\n  //     childContent1.style.display = \"block\";\n  //   } else if (img1.src.includes(\"up.png\")) {\n  //     img1.src = \"./material/icon/down.png\";\n  //     margin1.style.margin = \"\";\n  //     childContent1.style.display = \"none\";\n  //   }\n  // };\n  //\n  // window.togglePic2 = function () {\n  //   var margin2 = document.getElementById(\"add\");\n  //   var img2 = document.getElementById(\"updown2\");\n  //   var childContent2 = document.getElementById(\"tem-dropdown-content2\");\n  //\n  //   if (img2.src.includes(\"down.png\")) {\n  //     img2.src = \"./material/icon/up.png\";\n  //     margin2.style.margin = \"40px 0\";\n  //     childContent2.style.display = \"block\";\n  //   } else if (img2.src.includes(\"up.png\")) {\n  //     img2.src = \"./material/icon/down.png\";\n  //     margin2.style.margin = \"\";\n  //     childContent2.style.display = \"none\";\n  //   }\n  // };\n\n  // 會員功能菜單顯示/隱藏\n  let memberInfoDiv = document.getElementById(\"memberInfoDiv\");\n  let slideshowContainer = document.getElementById(\"slideshow-container\");\n  let isMemberDivVisible = false; // 初始為隱藏\n\n  document.getElementById(\"memberIcon\").addEventListener(\"click\", (e) => {\n    e.stopPropagation(); // 防止點擊會員圖標時觸發頁面其他地方的點擊事件\n    if (isMemberDivVisible) {\n      memberInfoDiv.style.display = \"none\";\n      // slideshowContainer.style.zIndex = 5;\n      isMemberDivVisible = false;\n    } else {\n      memberInfoDiv.style.display = \"block\";\n      isMemberDivVisible = true;\n      // slideshowContainer.style.zIndex = -1;\n    }\n  });\n\n  // 點擊頁面其他地方時隱藏會員功能菜單\n  document.addEventListener(\"click\", function (e) {\n    e.stopPropagation();\n    if (isMemberDivVisible && !memberInfoDiv.contains(e.target)) {\n      memberInfoDiv.style.display = \"none\";\n      // slideshowContainer.style.zIndex = 5;\n      isMemberDivVisible = false;\n    }\n  });\n\n  // 搜索框顯示/隱藏\n  // let isOpen = false;\n  // let searchDiv = document.getElementById(\"searchDiv\");\n  // let searchIcon = document.getElementById(\"searchIcon\");\n  //\n  // searchIcon.addEventListener(\"click\", () => {\n  //   if (!isOpen) {\n  //     searchDiv.style.width = \"200px\";\n  //     searchDiv.style.border = \"1px solid #a1c14b\";\n  //     isOpen = true;\n  //   } else {\n  //     searchDiv.style.width = \"0\";\n  //     searchDiv.style.border = \"0\";\n  //     isOpen = false;\n  //   }\n  // });\n\n  // 點擊頁面其他地方時隱藏搜索框和會員功能菜單\n  document.getElementById(\"myContainer\").addEventListener(\"click\", () => {\n    if (isMemberDivVisible) {\n      memberInfoDiv.style.display = \"none\";\n      // slideshowContainer.style.zIndex = 5;\n      isMemberDivVisible = false;\n    }\n  });\n\n  //header的logo點了會跳到首頁\n  document.getElementById(\"logoDiv\").addEventListener(\"click\", () => {\n    window.location.href = \"/enjoyum\";\n  });\n\n  //判斷使用者是否為登入狀態\n  let loginDiv = document.getElementById(\"loginDiv\");\n  let logoutDiv = document.getElementById(\"logoutDiv\");\n\n  loginDiv.style.display = \"none\";\n  logoutDiv.style.display = \"none\";\n\n  fetch(\"http://localhost:8080/users/checkSession\", {\n    method: \"GET\",\n  })\n    .then((response) => {\n      if (!response.ok) {\n        throw new Error(\"Error : \");\n      }\n      return response.json();\n    })\n    .then((data) => {\n      if (data) {\n        loginDiv.style.display = \"none\";\n        logoutDiv.style.display = \"block\";\n      } else {\n        loginDiv.style.display = \"block\";\n        logoutDiv.style.display = \"none\";\n      }\n    })\n    .catch((error) => {\n      console.log(\"Error :\" + error);\n    });\n\n  //登出\n  document.getElementById(\"logout\").addEventListener(\"click\", () => {\n    fetch(\"http://localhost:8080/users/logout\", {\n      method: \"GET\",\n    })\n      .then((response) => {\n        if (!response.ok) {\n          throw new Error(\"Error : \");\n        }\n        return response.json();\n      })\n      .then((data) => {\n        if (typeof data === \"boolean\") {\n          if (data) {\n            alert(\"成功登出\");\n            window.location.href = \"/enjoyum\";\n          }\n        } else {\n          console.log(\"Unexpected response data:\", data);\n        }\n      })\n      .catch((error) => {\n        console.error(\"Error:\", error);\n      });\n  });\n  \n  //聯絡我們\n  let contactDiv = document.getElementById(\"contactDiv\");\n  \n  document.getElementById(\"contactIcon\").addEventListener(\"click\", () => {\n\tcontactDiv.style.display = 'block';\n  })\n\n  document.getElementById(\"close\").addEventListener(\"click\", () => {\n      contactDiv.style.display = 'none';\n  })\n  \n  document.getElementById(\"contactBtn\").addEventListener(\"click\", () => {\n      let name = document.getElementById(\"name\").value;\n      let contactInfo = document.getElementById(\"contactInfo\").value;\n\t  let questionType = document.getElementById(\"questionType\").value;\n      let message = document.getElementById(\"message\").value;\n\n      if(name === '' || name == null){\n          alert('請輸入姓名');\n      }else if(contactInfo === '' || contactInfo == null){\n          alert('請輸入聯絡方式');\n      }else if(message === '' || message == null){\n          alert('請輸入諮詢內容');\n      }else{\n          fetch('http://localhost:8080/users/consult', {\n              method: 'POST',\n              headers: {\n                  'Content-Type': 'application/json'\n              },\n              body: JSON.stringify({\n                  name: name,\n                  contactInfo: contactInfo,\n\t\t\t\t  questionType : questionType,\n                  message : message\n              })\n          }).then(response => {\n              if(!response.ok){\n                  throw new Error ('Error :');\n                  alert('伺服器忙碌中,請稍後在試!!');\n              }else{\n\t\t\t\tcontactDiv.style.display = 'none';\n                alert('感謝您的諮詢，我們我盡快回復您的問題！！');\n\t\t\t  }\n          }).catch(error => {\n              console.log('Error:', error);\n          })\n      }\n  })\n  \n  \n});\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/target/classes/static/js/template.js b/target/classes/static/js/template.js
--- a/target/classes/static/js/template.js	(revision 9096718e92387ba0e53803eca67c3d058acf8d38)
+++ b/target/classes/static/js/template.js	(date 1728297566857)
@@ -1,6 +1,6 @@
-//window.onload = () => {
+window.onload = () => {
 
-document.addEventListener("DOMContentLoaded", function () {	
+//document.addEventListener("DOMContentLoaded", function () {	
   // 菜單展開、關閉功能
   window.openSidenav = function () {
     document.getElementById("sidenav").style.width = "100%";
@@ -210,4 +210,4 @@
   })
   
   
-});
+}
Index: target/classes/static/js/myCollection.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>window.onload = function () {\n  // 定義全局 userId 變數\n  let userId = null;\n\n  // 獲取 userId，並在成功後調用 fetchFavorites('products')\n  fetch('api/favorites/recipes/getUserId')\n      .then(response => response.json())\n      .then(data => {\n        userId = data;\n\n        // 確保 userId 已經成功獲取，然後加載商品\n        if (userId) {\n          fetchFavorites('products');\n        }\n      })\n      .catch(error => {\n        console.error('Error fetching userId:', error);\n      });\n\n  // 按鈕更換商品及食譜\n  const buttons = document.querySelectorAll('.collection-tab-button');\n  const content = document.querySelector('.collection-content');\n\n  buttons.forEach(button => {\n    button.addEventListener('click', () => {\n      buttons.forEach(btn => btn.classList.remove('active'));\n      button.classList.add('active');\n\n      // 判斷點擊的是“我的商品”還是“我的食譜”\n      if (button.textContent === '我的商品') {\n        fetchFavorites('products');\n      } else {\n        fetchFavorites('recipes');\n      }\n    });\n  });\n\n  // 定義 fetchFavorites 函數，用於根據類型來發送 API 請求\n  function fetchFavorites(type) {\n    if (!userId) {\n      console.error('userId 未獲取到');\n      return;\n    }\n\n    let apiUrl = '';\n\n    // 根據類型設置 API URL\n    if (type === 'products') {\n      apiUrl = `/api/favorites/products?userId=${userId}`;  // 獲取收藏商品的API\n    } else if (type === 'recipes') {\n      apiUrl = `/api/favorites/recipes/user?userId=${userId}`;  // 獲取收藏食譜的API\n    }\n\n    // 使用 fetch 向後端發送請求，然後處理返回的數據\n    fetch(apiUrl)\n        .then(response => response.json())\n        .then(data => {\n          displayFavorites(data, type);  // 傳入類型以區分商品或食譜\n        })\n        .catch(error => {\n          console.error('Error fetching data:', error);\n        });\n  }\n\n  // 更新頁面顯示的商品或食譜\n  function displayFavorites(favorites, type) {\n    const container = document.getElementById(\"productContainer\");\n    container.innerHTML = \"\";  // 清空現有內容\n  \n    if (favorites.length === 0) {\n      container.innerHTML = `<p>您沒有收藏的${type === 'products' ? '商品' : '食譜'}。</p>`;\n      return;\n    }\n  \n    favorites.forEach(favorite => {\n      const imageSrc = favorite.imageUrl || '../material/icon/error.png';\n  \n      container.innerHTML += `\n        <div class=\"product\" data-product-id=\"${favorite.productId}\">\n          <img class=\"product-image\" src=\"${imageSrc}\" alt=\"${favorite.name}\" onerror=\"this.src='../material/icon/error.png';\">\n          <h3 class=\"product-name\">${favorite.name}</h3>\n          <p class=\"product-price\">$NT${favorite.price}</p>\n          <div class=\"home-product-btn\">\n            <button class=\"add-to-favorite favorited\" data-product-id=\"${favorite.productId}\">\n              <i class=\"fa-solid fa-heart\"></i>\n            </button>\n            <button class=\"add-to-cart\" data-product-id=\"${favorite.productId}\">\n              <i class=\"fa-solid fa-cart-shopping\"></i>&nbsp;&nbsp;&nbsp;加入購物車\n            </button>\n          </div>\n        </div>`;\n    });\n    // 為收藏和購物車按鈕添加事件處理\n    attachButtonHandlers();\n  }\n\n  // 收藏和加入購物車按鈕處理邏輯\n  function attachButtonHandlers() {\n    // 收藏商品按鈕事件處理\n    document.querySelectorAll(\".add-to-favorite\").forEach(button => {\n      button.addEventListener(\"click\", function () {\n        const productId = this.getAttribute('data-product-id');\n        const type = this.getAttribute('data-type');  // 獲取類型來決定是商品還是食譜\n        removeFavorite(productId, type, this);\n      });\n    });\n\n    // 加入購物車按鈕事件處理，添加商品數量選擇功能\n    document.querySelectorAll(\".add-to-cart\").forEach(button => {\n      button.addEventListener(\"click\", function () {\n        const productId = this.getAttribute('data-product-id');\n        const productName = this.closest('.product').querySelector('.product-name').innerText;\n        promptQuantityAndAddToCart(productId, productName);\n      });\n    });\n  }\n\n  // 彈出視窗詢問商品數量並將商品添加到購物車\n  function promptQuantityAndAddToCart(productId, productName) {\n    Swal.fire({\n      title: `請輸入您想購買的「${productName}」數量`,\n      input: 'number',\n      inputLabel: '數量',\n      inputValue: 1,\n      showCancelButton: true,\n      confirmButtonText: '確認',\n      cancelButtonText: '取消',\n      inputValidator: (value) => {\n        if (!value || value <= 0) {\n          return '請輸入正確的數量';\n        }\n      }\n    }).then((result) => {\n      if (result.isConfirmed) {\n        const quantity = result.value;\n\n        // 發送請求到後端的購物車 API\n        fetch(`/api/cart/${userId}`, {\n          method: 'POST',\n          body: JSON.stringify({\n            productName: productName, // 使用商品名稱\n            quantity: parseInt(quantity) // 將數量轉換為整數\n          }),\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        })\n            .then(() => {\n              Swal.fire('成功', `商品已加入購物車，數量：${quantity}`, 'success');\n            })\n            .catch(error => {\n              console.error('Error adding to cart:', error);\n            });\n      }\n    });\n  }\n\n  // 取消收藏邏輯，根據不同類型來呼叫不同的API\n  function removeFavorite(productId, type, button) {\n    let apiUrl;\n\n    if (type === 'products') {\n      apiUrl = `/api/favorites/products/remove?userId=${userId}&productId=${productId}`;  // 呼叫刪除商品的API\n      apiUrl = `/api/favorites/remove?userId=${userId}&productId=${productId}`;  // 呼叫刪除商品的API\n    } else if (type === 'recipes') {\n      apiUrl = `/api/favorites/recipes/remove?userId=${userId}&productId=${productId}`;  // 呼叫刪除食譜的API\n    }\n\n    fetch(apiUrl, {\n      method: 'DELETE',\n    })\n        .then(() => {\n          const productElement = document.querySelector(`.product[data-product-id=\"${productId}\"]`);\n          if (productElement) {\n            productElement.remove();  // 從頁面中移除商品\n          }\n          alert(`已將收藏移除！`);\n        })\n        .catch(error => {\n          console.error('Error removing favorite:', error);\n        });\n  }\n};\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/target/classes/static/js/myCollection.js b/target/classes/static/js/myCollection.js
--- a/target/classes/static/js/myCollection.js	(revision 9096718e92387ba0e53803eca67c3d058acf8d38)
+++ b/target/classes/static/js/myCollection.js	(date 1728297566856)
@@ -1,4 +1,4 @@
-window.onload = function () {
+document.addEventListener("DOMContentLoaded", function () {
   // 定義全局 userId 變數
   let userId = null;
 
@@ -19,7 +19,6 @@
 
   // 按鈕更換商品及食譜
   const buttons = document.querySelectorAll('.collection-tab-button');
-  const content = document.querySelector('.collection-content');
 
   buttons.forEach(button => {
     button.addEventListener('click', () => {
@@ -65,53 +64,47 @@
   // 更新頁面顯示的商品或食譜
   function displayFavorites(favorites, type) {
     const container = document.getElementById("productContainer");
-    container.innerHTML = "";  // 清空現有內容
-  
+    let html = '';  // 構建 HTML 字串
+
     if (favorites.length === 0) {
-      container.innerHTML = `<p>您沒有收藏的${type === 'products' ? '商品' : '食譜'}。</p>`;
-      return;
-    }
-  
-    favorites.forEach(favorite => {
-      const imageSrc = favorite.imageUrl || '../material/icon/error.png';
-  
-      container.innerHTML += `
-        <div class="product" data-product-id="${favorite.productId}">
-          <img class="product-image" src="${imageSrc}" alt="${favorite.name}" onerror="this.src='../material/icon/error.png';">
-          <h3 class="product-name">${favorite.name}</h3>
-          <p class="product-price">$NT${favorite.price}</p>
-          <div class="home-product-btn">
-            <button class="add-to-favorite favorited" data-product-id="${favorite.productId}">
-              <i class="fa-solid fa-heart"></i>
-            </button>
-            <button class="add-to-cart" data-product-id="${favorite.productId}">
-              <i class="fa-solid fa-cart-shopping"></i>&nbsp;&nbsp;&nbsp;加入購物車
-            </button>
-          </div>
-        </div>`;
-    });
-    // 為收藏和購物車按鈕添加事件處理
-    attachButtonHandlers();
-  }
+      html = `<p>您沒有收藏的${type === 'products' ? '商品' : '食譜'}。</p>`;
+    } else {
+      favorites.forEach(favorite => {
+        const imageSrc = favorite.imageUrl || '../material/icon/error.png';
+        html += `
+          <div class="product" data-product-id="${favorite.productId}" data-type="${type}">
+            <img class="product-image" src="${imageSrc}" alt="${favorite.name}" onerror="this.src='../material/icon/error.png';">
+            <h3 class="product-name">${favorite.name}</h3>
+            <p class="product-price">$NT${favorite.price}</p>
+            <div class="home-product-btn">
+              <button class="add-to-favorite favorited" data-product-id="${favorite.productId}">
+                <i class="fa-solid fa-heart"></i>
+              </button>
+              <button class="add-to-cart" data-product-id="${favorite.productId}">
+                <i class="fa-solid fa-cart-shopping"></i>&nbsp;&nbsp;&nbsp;加入購物車
+              </button>
+            </div>
+          </div>`;
+      });
+    }
 
-  // 收藏和加入購物車按鈕處理邏輯
-  function attachButtonHandlers() {
-    // 收藏商品按鈕事件處理
-    document.querySelectorAll(".add-to-favorite").forEach(button => {
-      button.addEventListener("click", function () {
-        const productId = this.getAttribute('data-product-id');
-        const type = this.getAttribute('data-type');  // 獲取類型來決定是商品還是食譜
-        removeFavorite(productId, type, this);
-      });
-    });
+    container.innerHTML = html;  // 一次性插入 DOM
+
+    // 事件代理 - 使用事件代理處理收藏和加入購物車按鈕
+    container.addEventListener('click', function(event) {
+      const target = event.target.closest('button');
+      if (!target) return;  // 如果不是按鈕則退出
 
-    // 加入購物車按鈕事件處理，添加商品數量選擇功能
-    document.querySelectorAll(".add-to-cart").forEach(button => {
-      button.addEventListener("click", function () {
-        const productId = this.getAttribute('data-product-id');
-        const productName = this.closest('.product').querySelector('.product-name').innerText;
+      const productId = target.getAttribute('data-product-id');
+      const productElement = target.closest('.product');
+      const type = productElement.getAttribute('data-type');
+
+      if (target.classList.contains('add-to-favorite')) {
+        removeFavorite(productId, type);
+      } else if (target.classList.contains('add-to-cart')) {
+        const productName = productElement.querySelector('.product-name').innerText;
         promptQuantityAndAddToCart(productId, productName);
-      });
+      }
     });
   }
 
@@ -156,11 +149,14 @@
   }
 
   // 取消收藏邏輯，根據不同類型來呼叫不同的API
-  function removeFavorite(productId, type, button) {
+  function removeFavorite(productId, type) {
     let apiUrl;
+    if (!type) {
+      console.error('Type is undefined');
+      return;
+    }
 
     if (type === 'products') {
-      apiUrl = `/api/favorites/products/remove?userId=${userId}&productId=${productId}`;  // 呼叫刪除商品的API
       apiUrl = `/api/favorites/remove?userId=${userId}&productId=${productId}`;  // 呼叫刪除商品的API
     } else if (type === 'recipes') {
       apiUrl = `/api/favorites/recipes/remove?userId=${userId}&productId=${productId}`;  // 呼叫刪除食譜的API
@@ -172,7 +168,7 @@
         .then(() => {
           const productElement = document.querySelector(`.product[data-product-id="${productId}"]`);
           if (productElement) {
-            productElement.remove();  // 從頁面中移除商品
+            productElement.remove();
           }
           alert(`已將收藏移除！`);
         })
@@ -180,4 +176,4 @@
           console.error('Error removing favorite:', error);
         });
   }
-};
+});
